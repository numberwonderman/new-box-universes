/**
 * js/collatz-mapper.js
 * Transforms the BigInt Collatz sequence into renderable, RCWA-inspired coordinates (x, y, z),
 * where y explicitly represents the Residue Class Modulo X (the Z_X ring).
 * (Meets Specs M1.0, M2.0, M3.0, M4.0)
 */

/**
 * Maps a BigInt Collatz sequence into visual coordinates.
 * @param {bigint[]} bigIntSequence - The sequence generated by the engine.
 * @param {bigint} X - The divisor factor (used as the modulo base for the residue class).
 * @returns {{x: number, y: number, z: number, residue: number}[]} An array of visual coordinate objects.
 */
export function mapSequenceToCoordinates(bigIntSequence, X) {
    // X must be a BigInt for the modulo operation
    if (typeof X !== 'bigint') {
        throw new TypeError("Parameter X must be a BigInt.");
    }
    
    // M1.0: Modular Export (using export function above)
    return bigIntSequence.map((value, index) => {
        // M4.0: X-coordinate is the step/time index
        const x_coord = index;

        // M3.0: Y-coordinate is the Residue Class (value MOD X)
        // This is the core structural analysis: position within the Z_X ring.
        const y_coord = Number(value % X);
        
        // M2.0: Z-coordinate is the raw sequence value, log-scaled for visualization.
        const z_coord = Number(value > 0n ? Math.log2(Number(value)) : 0);

        return { 
            x: x_coord, 
            y: y_coord, 
            z: z_coord, 
            residue: y_coord // Explicit residue class for color coding and filtering
        };
    });
}